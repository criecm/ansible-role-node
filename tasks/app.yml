---
- include_vars: app.yml

- name: 'user {{ node_app.user }}'
  user:
    name: '{{ node_app.user }}'
    shell: /bin/sh
    home: '/home/{{ node_app.user }}'
    createhome: yes

- name: 'dir {{ node_app.path }}'
  file:
    path: '{{ node_app.path }}'
    state: directory

- name: 'git {{ node_app.gitsrc }}'
  git:
    repo: '{{ node_app.gitsrc }}'
    dest: '{{ node_app.path }}'
    update: '{{ node_app.gitupdate }}'
    force: '{{ node_app.gitforce }}'
    version: '{{ node_app.gitversion | default(omit) }}'
  when: '"gitsrc" in node_app'
  register: gitted

- name: 'chown -R {{ node_app.user }} {{ node_app.path }}'
  file:
    path: '{{ node_app.path }}'
    mode: 'u=rwX,g=rwX,o=rX'
    owner: '{{ node_app.user }}'
    recurse: yes

- name: 'search package.json'
  stat:
    path: '{{ node_app.path }}/package.json'
  register: node_has_package_json

- name: 'search bower.json'
  stat:
    path: '{{ node_app.path }}/bower.json'
  register: node_has_bower_json

- name: config files
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest | regex_replace("^([^/])",node_app.path+"/\1") }}'
    force: '{{ node_force_conf | default(False) }}'
  with_items: '{{ node_app.confs | default([]) }}'
  register: confs

- name: npm install
  npm:
    path: '{{ node_app.path }}'
    production: yes
#  command: 'npm install --production'
#  args:
#    chdir: '{{ node_app.path }}'
  become_user: '{{ node_app.user }}'
  become: yes
  become_method: su
  when: node_has_package_json.stat.exists

- name: bower
  block:
    - name: check bower
      stat:
        path: '{{ node_app.path }}/node_modules/.bin/bower'
      register: bowerexe
    - name: install bower
      npm:
        path: '{{ node_app.path }}'
        name: bower
        state: present
        production: yes
      become: yes
      become_method: su
      become_user: '{{ node_app.user }}'
      when: not bowerexe.stat.exists
    - name: bower install
      bower:
        path: '{{ node_app.path }}'
        relative_execpath: node_modules/.bin
        production: yes
        state: present
      become: yes
      become_method: su
      become_user: '{{ node_app.user }}'
  when: node_has_bower_json.stat.exists

- name: install freebsd service
  template:
    src: FreeBSD-rc.j2
    dest: '/usr/local/etc/rc.d/{{ node_app.name }}'
    mode: '0755'
  when: ansible_os_family == "FreeBSD"

- name: install systemd unit
  block:
    - name: service template
      template:
        src: systemd.service.j2
        dest: '/home/{{ node_app.user }}/{{ node_app.name }}.service'
    - name: enable service
      command: 'systemctl enable /home/{{ node_app.user }}/{{ node_app.name }}.service'
  when: ansible_os_family == "Debian"

- name: stop app
  service:
    name: '{{ node_app.name }}'
    state: stopped
  failed_when: False
  when: node_start_app and gitted.changed or confs.changed

- name: start app
  service:
    name: '{{ node_app.name }}'
    state: started
    enabled: yes
  when: node_start_app
